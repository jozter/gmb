from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
import app.keyboards as kb
from app.lexicon import lexicone as lx
from config import TOKEN

router=Router()
bot = Bot(token=TOKEN)

message_ids = {}

@router.message(Command(commands=["start"]))
async def start(message: Message):
    await message.answer(text=lx['/start'], parse_mode=ParseMode.HTML, reply_markup=kb.menu)
    
###################     –ö–ù–û–ü–ö–ê –°–û–†–¢–ò–†–û–í–ö–ê     ###############################################

@router.message(F.text=='–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –ú–ò–°–ò–°')
async def inline_sort(message: Message):
    chat_id = message.chat.id
    await message.answer(text='–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–∞—Ç—å?', reply_markup=kb.set_sort) 
    resp_message = await message.answer(text='–í—ã–±–µ—Ä–∏ —Ñ—Ä–∞–∫—Ü–∏—é.')
    message_ids[chat_id] = resp_message.message_id

@router.callback_query(lambda c: c.data.startswith('sort'))
async def sortirovka(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    await callback.answer()
    response_text = lx.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
    
    if chat_id in message_ids:
        try:
            await callback.bot.edit_message_text(
                text=response_text,
                chat_id=chat_id,
                message_id=message_ids[chat_id],
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
           print(f"Error editing message: {e}")
    else:
        sent_message = await callback.message.answer(response_text)
        message_ids[chat_id] = sent_message.message_id
###################     –ö–ù–û–ü–ö–ê –ï–°–¢–¨ –í–û–ü–†–û–°     #############################################    

@router.message(F.text=='–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å')
async def start(message: Message):
    await message.answer(text="–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –ø–∏—à–∏ @twwdy. üßö‚Äç‚ôÄÔ∏è")

###################     –ö–ù–û–ü–ö–ê –û –ù–ê–°     #######################################    

@router.message(F.text == '–û –Ω–∞—Å')
async def inline_sort(message: Message):
    chat_id = message.chat.id
    await message.answer(lx.get('1about1'), reply_markup=kb.set_about, parse_mode=ParseMode.HTML)
    resp_message1 = await message.answer(text='–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å.')
    message_ids[chat_id] = resp_message1.message_id  

@router.callback_query(lambda c: c.data.startswith('about'))
async def sortirovka(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    await callback.answer()
    response_text = lx.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")

    if chat_id in message_ids:
        try:
            await callback.bot.edit_message_text(
                text=response_text,
                chat_id=chat_id,
                message_id=message_ids[chat_id],
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            print(f"Error editing message: {e}")
    else:
        sent_message1 = await callback.message.answer(response_text)
        message_ids[chat_id] = sent_message1.message_id
        
###################     –ö–ù–û–ü–ö–ê –£–ó–ù–ê–¢–¨ –û –°–û–¢–†–ò–†–û–í–ö–ï     ########################################

@router.message(F.text=='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ç–æ—Ä—Å—ã—Ä—å—è')
async def start(message: Message):
    await message.answer(lx.get('prepearing_waste'), parse_mode=ParseMode.HTML)

###################     –ö–ù–û–ü–ö–ê –ö–û–ù–¢–ï–ô–ù–ï–† –ó–ê–ü–û–õ–ù–ï–ù     ##################################################### 

@router.message(F.text == "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω")
async def container_filled(message: Message):
    #await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞ —Ç–∞–∫ –∂–µ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç:")
    await message.answer("–†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π ^.^")

###################     –ê–ô–î–ò –ß–ê–¢–ê     ########################################################### 

@router.message(Command("chat_id"))
async def cmd_chat_id(message: Message):
    await message.answer(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {message.chat.id}")

