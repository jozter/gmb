from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import app.keyboards as kb
from app.lexicon import lexicone as lx
from dotenv import load_dotenv
import os

load_dotenv()

router=Router()
TOKEN = os.getenv("TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
bot = Bot(token=TOKEN)

message_ids = {}
# –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class PhotoState(StatesGroup):
    waiting_for_photo = State()
    waiting_for_caption = State()

@router.message(Command(commands=["start"]))
async def start(message: Message):
    await message.answer(text=lx['/start'], parse_mode=ParseMode.HTML, reply_markup=kb.menu)
    
###################     –ö–ù–û–ü–ö–ê –°–û–†–¢–ò–†–û–í–ö–ê     ###############################################

@router.message(F.text=='–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –ú–ò–°–ò–°')
async def inline_sort(message: Message):
    chat_id = message.chat.id
    await message.answer(text='–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–∞—Ç—å?', reply_markup=kb.set_sort) 
    resp_message = await message.answer(text='–í—ã–±–µ—Ä–∏ —Ñ—Ä–∞–∫—Ü–∏—é.')
    message_ids[chat_id] = resp_message.message_id

@router.callback_query(lambda c: c.data.startswith('sort'))
async def sortirovka(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    await callback.answer()
    response_text = lx.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
    
    if chat_id in message_ids:
        try:
            await callback.bot.edit_message_text(
                text=response_text,
                chat_id=chat_id,
                message_id=message_ids[chat_id],
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
           print(f"Error editing message: {e}")
    else:
        sent_message = await callback.message.answer(response_text)
        message_ids[chat_id] = sent_message.message_id
###################     –ö–ù–û–ü–ö–ê –ï–°–¢–¨ –í–û–ü–†–û–°     #############################################    

@router.message(F.text=='–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å')
async def start(message: Message):
    await message.answer(text="–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –ø–∏—à–∏ @twwdy. üßö‚Äç‚ôÄÔ∏è")

###################     –ö–ù–û–ü–ö–ê –û –ù–ê–°     #######################################    

@router.message(F.text == '–û –Ω–∞—Å')
async def inline_sort(message: Message):
    chat_id = message.chat.id
    await message.answer(lx.get('1about1'), reply_markup=kb.set_about, parse_mode=ParseMode.HTML)
    resp_message1 = await message.answer(text='–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å.')
    message_ids[chat_id] = resp_message1.message_id  

@router.callback_query(lambda c: c.data.startswith('about'))
async def sortirovka(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    await callback.answer()
    response_text = lx.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")

    if chat_id in message_ids:
        try:
            await callback.bot.edit_message_text(
                text=response_text,
                chat_id=chat_id,
                message_id=message_ids[chat_id],
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            print(f"Error editing message: {e}")
    else:
        sent_message1 = await callback.message.answer(response_text)
        message_ids[chat_id] = sent_message1.message_id
        
###################     –ö–ù–û–ü–ö–ê –£–ó–ù–ê–¢–¨ –û –°–û–¢–†–ò–†–û–í–ö–ï     ########################################

@router.message(F.text=='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ç–æ—Ä—Å—ã—Ä—å—è')
async def start(message: Message):
    await message.answer(lx.get('prepearing_waste'), parse_mode=ParseMode.HTML)

###################     –ö–ù–û–ü–ö–ê –ö–û–ù–¢–ï–ô–ù–ï–† –ó–ê–ü–û–õ–ù–ï–ù     ##################################################### 

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω"
@router.message(F.text == "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω")
async def container_filled(message: Message, state: FSMContext):
    await message.answer("–°—É–ø–µ—Ä! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
    await state.set_state(PhotoState.waiting_for_photo)

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∂–¥–µ—Ç –∏—Ö
@router.message(F.photo)
async def ignore_unexpected_photo(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == PhotoState.waiting_for_photo.state:
        await process_photo(message, state)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def process_photo(message: Message, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id, user=message.from_user)

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    skip_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_caption")]
        ]
    )

    await message.answer("–¢—ã –º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–º–µ–Ω–∞—Ç—Ä–∏–π –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' ‚≠êÔ∏è.", reply_markup=skip_button)
    await state.set_state(PhotoState.waiting_for_caption)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç)
@router.message(PhotoState.waiting_for_caption, F.text)
async def process_caption(message: Message, state: FSMContext):
    data = await state.get_data()
    photo_id = data['photo']
    user = data['user']

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    user_info = f"‚ñ™Ô∏è *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:*\n"
    user_info += f"‚ñ´Ô∏è ID: `{user.id}`\n"
    if user.username:
        user_info += f"‚ñ´Ô∏è @{user.username}\n"
    if user.full_name:
        user_info += f"‚ñ´Ô∏è –ò–º—è: {user.full_name}\n"

    caption = f"^.^ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É\nüí¨ {message.text}\n\n{user_info}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç
    await message.bot.send_photo(ADMIN_CHAT_ID, photo=photo_id, caption=caption, parse_mode="Markdown")

    await message.answer("–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ —É—á–∞—Å—Ç–∏–µ! ü©µ ")
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
@router.callback_query(F.data == "skip_caption")
async def skip_caption(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photo_id = data['photo']
    user = data['user']

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    user_info = f"‚ñ™Ô∏è *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:*\n"
    user_info += f"‚ñ´Ô∏è ID: `{user.id}`\n"
    if user.username:
        user_info += f"‚ñ´Ô∏è @{user.username}\n"
    if user.full_name:
        user_info += f"‚ñ´Ô∏è –ò–º—è: {user.full_name}\n"

    caption = f"^.^ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É\nüí¨ –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n\n{user_info}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
    await callback_query.message.bot.send_photo(ADMIN_CHAT_ID, photo=photo_id, caption=caption, parse_mode="Markdown")

    await callback_query.message.answer("–°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ —É—á–∞—Å—Ç–∏–µ! ü©µ ")
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    
###################     –ê–ô–î–ò –ß–ê–¢–ê     ########################################################### 

@router.message(Command("chat_id"))
async def cmd_chat_id(message: Message):
    await message.answer(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {message.chat.id}")

###################     –ê–ô–î–ò –¢–†–ï–î–ê     ########################################################### 

@router.message(F.text == "Please, —Å–∫–∞–∂–∏ –º–Ω–µ id —ç—Ç–æ–π —Ç–µ–º—ã")
async def get_thread_id(message: Message):
    if message.message_thread_id:
        await message.reply(f"ID —ç—Ç–æ–π —Ç–µ–º—ã: {message.message_thread_id}")
    else:
        await message.reply("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ —Ç–µ–º–µ, –∑–¥–µ—Å—å –Ω–µ—Ç ID.")