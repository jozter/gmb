from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
import app.keyboards as kb
from app.lexicon import lexicone as lx
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

router=Router()

resp_id = None 
resp_id1 = None

@router.message(Command(commands=["start"]))
async def start(message: Message):
    await message.answer(text=lx['/start'], parse_mode=ParseMode.HTML, reply_markup=kb.menu)
    
####################################–ö–ù–û–ü–ö–ê –°–û–†–¢–ò–†–û–í–ö–ê###############################################

@router.message(F.text=='–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –ú–ò–°–ò–°')
async def inline_sort(message: Message):
    global resp_id
    await message.answer(text='–†–∞–∑–¥–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –æ—Ç—Ö–æ–¥–æ–≤', reply_markup=kb.set_sort) 
    resp_message = await message.answer(text='–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ.')
    resp_id = resp_message.message_id

@router.callback_query(lambda c: c.data.startswith('sort'))
async def sortirovka(callback: CallbackQuery):
    global resp_id
    await callback.answer()
    response_text = lx.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
    if resp_id:
        try:
            await callback.bot.edit_message_text(
                text=response_text,
                chat_id=callback.message.chat.id,
                message_id=resp_id,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            print(f"Error editing message: {e}")
    else:
        sent_message = await callback.message.answer(response_text)
        resp_id = sent_message.message_id
       
#################################–ù–ï–†–ê–ë–û–ß–ï–ï–ï########################################################## 

@router.message(F.text=='–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω')
async def start(message: Message):
    await message.answer(text="–§—É–Ω–∫—Ü–∏—è –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –º—ã –µ–µ –¥–æ–±–∞–≤–∏–º. üíö")
    
@router.message(F.text=='–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å')
async def start(message: Message):
    await message.answer(text="–§—É–Ω–∫—Ü–∏—è –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –º—ã –µ–µ –¥–æ–±–∞–≤–∏–º. üíö")
    
###############################–ö–ù–û–ü–ö–ê –û –ù–ê–°##############################################
    
@router.message(F.text=='–û –Ω–∞—Å')
async def inline_sort(message: Message):
    global resp_id1
    await message.answer(lx.get('1about1'), reply_markup=kb.set_about, parse_mode=ParseMode.HTML) 
    resp_message1 = await message.answer(text='–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å.')
    resp_id1 = resp_message1.message_id

@router.callback_query(lambda c: c.data.startswith('about'))
async def sortirovka(callback: CallbackQuery):
    global resp_id1
    await callback.answer()
    response_text = lx.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
    if resp_id1:
        try:
            await callback.bot.edit_message_text(
                text=response_text,
                chat_id=callback.message.chat.id,
                message_id=resp_id1,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            print(f"Error editing message: {e}")
    else:
        sent_message1 = await callback.message.answer(response_text)
        resp_id1 = sent_message1.message_id

###############################–ö–ù–û–ü–ö–ê –£–ó–ù–ê–¢–¨ –û –°–û–¢–†–ò–†–û–í–ö–ï##############################################

@router.message(F.text=='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ç–æ—Ä—Å—ã—Ä—å—è')
async def start(message: Message):
    await message.answer(lx.get('prepearing_waste'), parse_mode=ParseMode.HTML)


