from backround import keep_alive
import telebot
from telebot import types

bot = telebot.TeleBot('6353092152:AAFGp49Tarh49CO3pzkHC50JYiMzHdexBqY')

user_id_file = open("user_id_file.txt", "r")
users_id = set()
for line in user_id_file.readlines():
  users_id.add(line.strip())
user_id_file.close()

# –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
faq = ['–ö—Ç–æ –º—ã —Ç–∞–∫–∏–µ?', 
       '–ß–µ–º –º—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è?', 
       '–ú—ã –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö',
      '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –¥–≤–∏–∂–µ–Ω–∏—é!']
faq_answers = ['''–ü—Ä–∏–≤–µ—Ç, –º—ã - –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª—É–± ¬´Green MISIS¬ª\!ü™¥
–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å 2021 –≥–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –ø–æ–≤—ã—à–µ–Ω–∏–µ–º –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö —ç–∫–æ–ª–æ–≥–∏–∏ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –∏–º –ø—Ä–∏–π—Ç–∏ –∫ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏, –∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—É ‚Äî –∫ —É—Å—Ç–æ–π—á–∏–≤–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é\.''',
               '''–ú—ã —Ä–µ–∞–ª–∏–∑—É–µ–º –Ω–µ–º–∞–ª–æ –≤–∞–∂–Ω—ã—Ö ¬´–∑–µ–ª–µ–Ω—ã—Ö¬ª –ø—Ä–æ–µ–∫—Ç–æ–≤:
‚Ä¢ —Ü–∏–∫–ª –ª–µ–∫—Ü–∏–π ¬´–≠–ö–û—à–∫–æ–ª–∞¬ª
‚Ä¢ –†–°–û –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¢–æ—á–∫–∏ –∫–∏–ø–µ–Ω–∏—è ‚Äì –ö–æ–º–º—É–Ω—ã
‚Ä¢ –∞–∫—Ü–∏–∏ –ø–æ —Å–±–æ—Ä—É –≤—Ç–æ—Ä—Å—ã—Ä—å—è ¬´–ò–∑ –æ—Ñ–∏—Å–∞ ‚Äî –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É¬ª 
‚Ä¢ —Å–≤–æ–ø\-–≤–µ—á–µ—Ä–∏–Ω–∫–∏ ¬´–°–í–û–ü: –ø–æ–¥–∞—Ä–∏ –æ–¥–µ–∂–¥–µ –Ω–æ–≤—É—é –∂–∏–∑–Ω—å¬ª 
‚Ä¢ –±—É–∫–∫—Ä–æ—Å—Å–∏–Ω–≥
–° 2022 –≥–æ–¥–∞ –ø—Ä–æ–≤–æ–¥–∏–º –µ–∂–µ–≥–æ–¥–Ω–æ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å ¬´–≠–ö–û—Ñ–µ—Å—Ç¬ª\!üå± ''',
              '''[*–ú—ã –≤ –í–ö*](https://vk.com/greenmisis)
[*–ú—ã –≤ Telegram*](https://t.me/greenmisis)''',
    '''–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –¥–≤–∏–∂–µ–Ω–∏—é\!ü™¥
–ü–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ —Ö–æ—á–µ—à—å –∫–∞–∫\-—Ç–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –±—É–¥—É—â–µ–µ –ø–ª–∞–Ω–µ—Ç—ã, –Ω–æ –Ω–µ –∑–Ω–∞–µ—à—å –∫–∞–∫\? –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º, –≥–¥–µ –º—ã –≤–º–µ—Å—Ç–µ –¥–≤–∏–∂–µ–º—Å—è –∫ –ª—É—á—à–µ–º—É –±—É–¥—É—â–µ–º—É\. –ú—ã —Ä–∞–¥—ã –Ω–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\!
–ù–∞—à–∞ —Ü–µ–ª—å ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –ª—é–¥–µ–π, —á—Ç–æ–±—ã –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏ —Å–µ–±—è, –∞ –¥–∞–ª—å—à–µ ‚Äî —Ü–µ–ª—ã–π –º–∏—Ä\!
–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ Green MISIS –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã —É–∑–Ω–∞–≤–∞—Ç—å –±–æ–ª—å—à–µ –æ–± —ç–∫–æ–ª–æ–≥–∏–∏ –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –≤–∞–∂–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\!
[*–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ Green MISIS*](https://docs.google.com/forms/d/e/1FAIpQLSfhh8TeQe4y_xUCEXUzJHtuHJihPIl6PzEmBfdf9inqh8cWmg/viewform)''']
faq_dict = {}
for i in range(len(faq)):
  faq_dict[faq[i]] = faq_answers[i]

# –£–∑–Ω–∞—Ç—å –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤—Ç–æ—Ä—Å—ã—Ä—å—è 
sec_mats = ['–°—Ç–µ–∫–ª–æ', '–ú–∞–∫—É–ª–∞—Ç—É—Ä–∞ ', '–ü–ª–∞—Å—Ç–∏–∫']
sm_answers = ['''*–°—Ç–µ–∫–ª–æ*\n
- –û–ø–æ–ª–æ—Å–Ω–∏—Ç–µ –æ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –∂–∏–¥–∫–æ—Å—Ç–∏
- –°–Ω–∏–º–∏—Ç–µ –∫—Ä—ã—à–∫–∏\n''', '''*–ú–∞–∫—É–ª–∞—Ç—É—Ä–∞*\n
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±—É–º–∞–≥—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–ª—ë–Ω–∫–∏ (–Ω–∞–¥–æ—Ä–≤–∏—Ç–µ –∫—Ä–∞–π, –µ—Å–ª–∏ –ø–ª–µ–Ω–∫–∞ –Ω–µ —Ç—è–Ω–µ—Ç—Å—è –∏ –Ω–µ –≤–∏–¥–Ω–∞,—Ç–æ –º–æ–∂–Ω–æ —Å–¥–∞–≤–∞—Ç—å) 
- –£–¥–∞–ª–∏—Ç–µ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –ø—Ä—É–∂–∏–Ω—ã –∏ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –≤–∫–ª—é—á–µ–Ω–∏—è
- –£–±–µ—Ä–∏—Ç–µ —Å–∫–æ—Ç—á\n
*–ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º*\n
- –ñ–∏—Ä–Ω–∞—è/–≥—Ä—è–∑–Ω–∞—è –±—É–º–∞–≥–∞ 
- –ß–µ–∫–∏ (—Å–¥–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
- –¢–µ—Ç—Ä–∞–ø–∞–∫ (—Å–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
- –ë—É–º–∞–∂–Ω—ã–µ —Å—Ç–∞–∫–∞–Ω—ã/–ø–æ—Å—É–¥–∞ 
- –ë—É–º–∞–∂–Ω—ã–µ —Å–∞–ª—Ñ–µ—Ç–∫–∏/–ø–æ–ª–æ—Ç–µ–Ω—Ü–∞\n
''', '''*–ü–ª–∞—Å—Ç–∏–∫*\n
- –û–ø–æ–ª–æ—Å–Ω–∏—Ç–µ –æ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–∏—â–∏ –∏ —Ö–∏–º–∏–∏
- –°–Ω–∏–º–∏—Ç–µ —Ç–µ—Ä–º–æ—É—Å–∞–¥–æ—á–Ω—É—é —É–ø–∞–∫–æ–≤–∫—É (–ø–ª–æ—Ç–Ω–æ –ø—Ä–∏–ª–µ–≥–∞–µ—Ç –ø–æ —Ñ–æ—Ä–º–µ —Ç–∞—Ä—ã)
- –ö–æ–º–ø–∞–∫—Ç–Ω–æ —Å–ª–æ–∂–∏—Ç–µ
- –°–Ω–∏–º–∏—Ç–µ –∫—Ä—ã—à–∫–∏ (—Å–¥–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ¬´–î–æ–±—Ä—ã–µ –∫—Ä—ã—à–µ—á–∫–∏¬ª)\n
*–ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º*\n
- –ü–ª–∞—Å—Ç–∏–∫ —Å –º–∞—Ä–∫–∏—Ä–æ–≤–∫–æ–π 7 Other\n''']

sm_dict = {}
for i in range(len(sec_mats)):
  sm_dict[sec_mats[i]] = sm_answers[i]

#–°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –≥–∏–≥–∏–µ–Ω–µ
advice = '''–ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ zero-waste –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ ‚ôªÔ∏è

‚ôªÔ∏è Zero-waste ‚Äì  —ç—Ç–æ –Ω–∞–±–æ—Ä –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ —Å–≤–µ–¥–µ–Ω–∏–µ –∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º—É—Å–æ—Ä–∞ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –≤–µ—â–µ–π. –ü—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è, –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è.

‚ôªÔ∏è –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤–≤–æ–¥–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å.
–í –∫–∞—á–µ—Å—Ç–≤–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–±—Ä–∞—Ç—å –≤—Å—ë –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤—Ç–æ—Ä—Å—ã—Ä—å–µ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –æ–¥–∏–Ω –ø–∞–∫–µ—Ç, –∞ –ø–æ—Ç–æ–º —Å–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å —Ç–∞–±–ª–∏—á–∫–æ–π –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –º–∞—Ä–∫–∏—Ä–æ–≤–æ–∫ —ç–∫–æ—Ü–µ–Ω—Ç—Ä–æ–º.

‚ôªÔ∏è –ò–∑–±–µ–≥–∞–π—Ç–µ ¬´–±–∏–æ—Ä–∞–∑–ª–∞–≥–∞–µ–º—ã—Ö¬ª –ø–∞–∫–µ—Ç–æ–≤
–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–≤–∞ —Ç–∏–ø–∞ ¬´–±–∏–æ—Ä–∞–∑–ª–∞–≥–∞–µ–º—ã—Ö¬ª –ø–∞–∫–µ—Ç–æ–≤
–û–∫—Å–æ—Ä–∞–∑–ª–∞–≥–∞–µ–º—ã–µ
–≠—Ç–æ –ø–∞–∫–µ—Ç—ã –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ –ø–ª–∞—Å—Ç–∏–∫–∞, –ø–æ–∫—Ä—ã—Ç–æ–≥–æ —Å–≤–µ—Ä—Ö—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ä–∞—Å—Ç–≤–æ—Ä–æ–º, —É—Å–∫–æ—Ä—è—é—â–∏–º –ø—Ä–æ—Ü–µ—Å—Å –æ–∫–∏—Å–ª–µ–Ω–∏—è –∏ —Ä–∞—Å–ø–∞–¥–∞ –ø–æ–ª–∏–º–µ—Ä–∞ –ø–æ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ —Å–≤–µ—Ç–∞, —Ç–µ–ø–ª–∞ –∏ –∫–∏—Å–ª–æ—Ä–æ–¥–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ—Å—è –≤ –≤–æ–∑–¥—É—Ö–µ. –ß–∞—â–µ –≤—Å–µ–≥–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–æ–±–∞–≤–∫–∞, –∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º d2w, –∏–∑-–∑–∞ –∫–æ—Ç–æ—Ä–æ–π —É–ø–∞–∫–æ–≤–∫—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å. –ì–∏–¥—Ä–æ–±–∏–æ—Ä–∞–∑–ª–∞–≥–∞–µ–º—ã–µ.
–≠—Ç–æ –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–ª–∏–º–µ—Ä–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤. –ù–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω—ã —É–ø–∞–∫–æ–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –∫—Ä–∞—Ö–º–∞–ª–∞, —Ä–µ–∂–µ ‚Äî –∏–∑ —Å–æ–∏, –ø—à–µ–Ω–∏—Ü—ã, —Å–∞—Ö–∞—Ä–Ω–æ–≥–æ —Ç—Ä–æ—Å—Ç–Ω–∏–∫–∞.
–ù–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —ç—Ç–æ–π —É–ø–∞–∫–æ–≤–∫–∏ –∏–¥—É—Ç –ø–∏—â–µ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —á—Ç–æ –≤ —É—Å–ª–æ–≤–∏—è—Ö —Å—Ä–µ–¥–Ω–µ–π –∂–∏–∑–Ω–∏ –ø–∞–∫–µ—Ç–∞ –≤ 12‚Äì16 –º–∏–Ω—É—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.

‚ôªÔ∏è –†–µ—à–∞—é—â–∏–º —Ñ–∞–∫—Ç–æ–º –ø—Ä–æ—Ç–∏–≤ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ, —á—Ç–æ  –≤ –†–æ—Å—Å–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–∏—Ö –≤–∏–¥–æ–≤ –æ—Ç—Ö–æ–¥–æ–≤. –í –∏—Ç–æ–≥–µ, –ø–∞–∫–µ—Ç—ã –ø–æ–ø–∞–¥–∞—é—Ç –Ω–∞ —Å–≤–∞–ª–∫–∏, –≥–¥–µ —Ä–∞–∑–ª–∞–≥–∞—é—Ç—Å—è –Ω–∞ –º–∏–∫—Ä–æ–ø–ª–∞—Å—Ç–∏–∫ –∏ –º–µ—Ç–∞–Ω.'''

communa_containers = ['com_glass', 'com_plastic', 'com_macul', 'com_bat', 'com_tops', 'com_stac']
communa_containers_dict = {'com_glass':'–°—Ç–µ–∫–ª–æ', 'com_plastic': '–ü–ª–∞—Å—Ç–∏–∫', 'com_macul':'–ú–∞–∫—É–ª–∞—Ç—É—Ä–∞', 'com_bat':'–ë–∞—Ç–∞—Ä–µ–π–∫–∏', 'com_tops':'–ö—Ä—ã—à–∫–∏', 'com_stac':'–°—Ç–∞–∫–∞–Ω—á–∏–∫–∏'}

@bot.message_handler(commands=['start', 'help'])
def start(message):
  global users_id
  user_id = message.chat.id
  start_markup = types.InlineKeyboardMarkup(row_width=1)
  if str(user_id) not in users_id:
    user_id_file = open("user_id_file.txt",  "a")
    user_id_file.write(str(user_id) + '\n')
    users_id.add(str(user_id))
    user_id_file.close()
  faq_but = types.InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –æ–± —ç–∫–æ–∫–ª—É–±–µ Green MISIS",
                                       callback_data='faq')
  ask_but = types.InlineKeyboardButton('–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?',
                                       callback_data='ask')
  bin_but = types.InlineKeyboardButton('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω',
                                       callback_data='bin')
  #gig_but = types.InlineKeyboardButton('–• –ø—Ä–∏–≤—ã—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç —Ç–µ–±—è eco-friendly',callback_data='gig')
  sm_but = types.InlineKeyboardButton('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ç–æ—Ä—Å—ã—Ä—å—è –æ—Ç –ê –¥–æ –Ø',
                                       callback_data='sm')
  start_markup.add(bin_but, sm_but,  faq_but, ask_but)
  bot.send_message(message.chat.id,
                   ''' –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç *Green MISIS!* 
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–æ–±—â–∏—Ç—å –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, –ø—Ä–∏–æ–±—â–∏—Ç—å—Å—è –∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –≤—Ç–æ—Ä—Å—ã—Ä—å—è, –∞ —Ç–∞–∫–∂–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º.''',
                   reply_markup=start_markup, parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data == 'faq')
def get_func_faq(call):
  global faq
  faq_markup = types.InlineKeyboardMarkup(row_width=1)
  faq_buts= []
  for i in range(len(faq)):
    faq_buts.append(types.InlineKeyboardButton(faq[i], callback_data=faq[i]))
    faq_markup.add(faq_buts[i])
  bot.send_message(call.message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", reply_markup=faq_markup)
  return

@bot.callback_query_handler(func=lambda call: call.data in faq)
def get_func_q(call):
  #bot.send_message(call.message.chat.id, call.data)

  if call.data == '–ö—Ç–æ –º—ã —Ç–∞–∫–∏–µ?':
    bot.send_message(call.message.chat.id, '''–ü—Ä–∏–≤–µ—Ç, –º—ã - –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª—É–± ¬´Green MISIS¬ª!\n –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å 2021 –≥–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –ø–æ–≤—ã—à–µ–Ω–∏–µ–º –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö —ç–∫–æ–ª–æ–≥–∏–∏ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –∏–º –ø—Ä–∏–π—Ç–∏ –∫ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏, –∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—É ‚Äî –∫ —É—Å—Ç–æ–π—á–∏–≤–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é.''')
  else:
    bot.send_message(call.message.chat.id, faq_dict[call.data], parse_mode='MarkdownV2')
  return

@bot.callback_query_handler(func=lambda call: call.data == 'gig')
def get_func_gig(call):
  global advice
  bot.send_message(call.message.chat.id, advice)
  return

@bot.callback_query_handler(func=lambda call: call.data == 'sm')
def get_func_sm(call):
  global sec_mats
  sm_markup = types.InlineKeyboardMarkup(row_width=1)
  sm_buts= []
  for i in range(len(sec_mats)):
    sm_buts.append(types.InlineKeyboardButton(sec_mats[i], callback_data=sec_mats[i]))
    sm_markup.add(sm_buts[i])
  bot.send_message(call.message.chat.id, '–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: _–≤—Ç–æ—Ä—Å—ã—Ä—å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å—Ç—ã–º –∏ —Å—É—Ö–∏–º!_\n–ö–∞–∫–æ–π –≤–∏–¥ –≤—Ç–æ—Ä—Å—ã—Ä—å—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=sm_markup, parse_mode="Markdown")
  return

@bot.callback_query_handler(func=lambda call: call.data in sec_mats)
def get_func_sm1(call):
  bot.send_message(call.message.chat.id, (sm_dict[call.data]), parse_mode="Markdown")

  call.data = ''

@bot.callback_query_handler(func=lambda call: call.data == 'ask')
def get_func_ask(call):
  ask_markup = types.InlineKeyboardMarkup()
  call.data = 'new_q'
  bot.send_message(call.message.chat.id,
                   "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤–æ–ø—Ä–æ—Å –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–µ–≥–æ",
                   reply_markup=ask_markup)

  @bot.message_handler(content_types=['text'])
  def get_message(message):
    global new_quest
    q_person_id_file = open("q_person_id.txt", "r")
    q_person_id = q_person_id_file.readlines()
    new_quest = message.text
    this_user_username = message.from_user.username
    bot.send_message(
      q_person_id[-1],
      f'–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  @{this_user_username}: ' + str(new_quest))
    bot.send_message(
      call.message.chat.id,
      '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å. –ê–∫—Ç–∏–≤–∏—Å—Ç—ã —ç–∫–æ–ª–æ–ª–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—É–±–∞ Green MISIS —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º.üåø'
    )
    q_person_id_file.close()
  return


@bot.callback_query_handler(func=lambda call: call.data == 'bin')
def get_func_bin(call):
  bin_markup = types.InlineKeyboardMarkup(row_width=1)
  g1_but = types.InlineKeyboardButton('–ì–æ—Ä–Ω—è–∫-1', callback_data='g1')
  b_but = types.InlineKeyboardButton('–ö–æ—Ä–ø—É—Å –ë', callback_data='campus_b')
  comm_but = types.InlineKeyboardButton('–¢–æ—á–∫–∞ –∫–∏–ø–µ–Ω–∏—è –ö–æ–º–º—É–Ω–∞', callback_data='communa')
  m3_but = types.InlineKeyboardButton('–ú–µ—Ç–∞–ª–ª—É—Ä–≥-3', callback_data='m3')
  media_center_but = types.InlineKeyboardButton('–ú–µ–¥–∏–∞—Ü–µ–Ω—Ç—Ä', callback_data='mc')
  bin_markup.add(comm_but, b_but, g1_but, m3_but, media_center_but)
  bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞", reply_markup=bin_markup)

@bot.callback_query_handler(func=lambda call: call.data == 'communa')
def get_func_communa_containers(call):
  communa_markup = types.InlineKeyboardMarkup(row_width=1)
  glass_but = types.InlineKeyboardButton('–°—Ç–µ–∫–ª–æ', callback_data='com_glass')
  plastic_but = types.InlineKeyboardButton('–ü–ª–∞—Å—Ç–∏–∫', callback_data='com_plastic')
  paper_but = types.InlineKeyboardButton('–ú–∞–∫—É–ª–∞—Ç—É—Ä–∞', callback_data='com_macul')
  batary_but = types.InlineKeyboardButton('–ë–∞—Ç–∞—Ä–µ–π–∫–∏', callback_data='com_bat')
  tops_but = types.InlineKeyboardButton('–ö—Ä—ã—à–∫–∏', callback_data='com_tops')
  stacs_but = types.InlineKeyboardButton('–°—Ç–∞–∫–∞–Ω—á–∏–∫–∏', callback_data='com_stac')
  communa_markup.add(glass_but, plastic_but, paper_but, batary_but, tops_but, stacs_but)
  bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', reply_markup=communa_markup)

@bot.callback_query_handler(func=lambda call: call.data == 'g1')
def get_func_g1_containers(call):
  g1_markup = types.InlineKeyboardMarkup(row_width=1)
  t_but = types.InlineKeyboardButton('–ö—Ä—ã—à–∫–∏', callback_data='g1_tops')
  b_but = types.InlineKeyboardButton('–ë–∞—Ç–∞—Ä–µ–π–∫–∏', callback_data='g1_bats')
  g1_markup.add(t_but, b_but)
  bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", reply_markup=g1_markup)
  
@bot.callback_query_handler(func=lambda call: call.data == 'm3')
def get_func_m3_containers(call):
  m3_markup = types.InlineKeyboardMarkup(row_width=1)
  t_but = types.InlineKeyboardButton('–ö—Ä—ã—à–∫–∏', callback_data='m3_tops')
  b_but = types.InlineKeyboardButton('–ë–∞—Ç–∞—Ä–µ–π–∫–∏', callback_data='m3_bats')
  m3_markup.add(t_but, b_but)
  bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", reply_markup=m3_markup)

@bot.callback_query_handler(func=lambda call: call.data == 'campus_b')
def get_func_campus_b_containers(call):
  campus_b_markup = types.InlineKeyboardMarkup(row_width=1)
  t_but = types.InlineKeyboardButton('–ö—Ä—ã—à–∫–∏', callback_data='campus_b_tops')
  campus_b_markup.add(t_but)
  bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", reply_markup=campus_b_markup)

@bot.callback_query_handler(func=lambda call: call.data == 'mc')
def get_func_mediacenter_containers(call):
  mediacenter_markup = types.InlineKeyboardMarkup(row_width=1)
  t_but = types.InlineKeyboardButton('–°—Ç–∞–∫–∞–Ω—á–∏–∫–∏', callback_data='mc_tops')
  mediacenter_markup.add(t_but)
  bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", reply_markup=mediacenter_markup)

@bot.callback_query_handler(
  func=lambda call: call.data in communa_containers or call.data in  ['g1_tops', 'g1_bats', 'm3_tops', 'm3_bats', 'campus_b_tops', 'mc_tops'])
def get_func_all_bin(call):
  if call.data in communa_containers:
    d_bin_person_id_file = open("d_bin_person_id.txt", "r")
    d_bin_person_id = d_bin_person_id_file.readlines()
    bot.send_message(d_bin_person_id[-1], "–í –¢–æ—á–∫–µ –∫–∏–ø–µ–Ω–∏—è –ö–æ–º–º—É–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä " + communa_containers_dict[call.data])
    bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ! –ú—ã –æ—Å–≤–æ–±–æ–¥–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
    d_bin_person_id_file.close()
  elif call.data == 'campus_b_tops':
    b_bin_person_id_file = open("b_bin_person_id.txt", "r")
    b_bin_person_id = b_bin_person_id_file.readlines()
    bot.send_message(b_bin_person_id[-1], "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫—Ä—ã—à–µ—á–∫–∞–º–∏ –≤ –∫–æ—Ä–ø—É—Å–µ –ë –∑–∞–ø–æ–ª–Ω–µ–Ω")
    bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ! –ú—ã –æ—Å–≤–æ–±–æ–¥–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
    b_bin_person_id_file.close()
  elif call.data == 'g1_tops':
    g1_bin_person_id_file = open("g1_bin_person_id.txt", "r")
    g1_bin_person_id = g1_bin_person_id_file.readlines()            
    bot.send_message(g1_bin_person_id[-1], "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫—Ä—ã—à–µ—á–∫–∞–º–∏ –≤ –ì1 –∑–∞–ø–æ–ª–Ω–µ–Ω")
    bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ! –ú—ã –æ—Å–≤–æ–±–æ–¥–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
  elif call.data == 'g1_bats':
    g1_bin_person_id_file = open("g1_bin_person_id.txt", "r")
    g1_bin_person_id = g1_bin_person_id_file.readlines()            
    bot.send_message(g1_bin_person_id[-1], "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –±–∞—Ç–∞—Ä–µ–π–∫–∞–º–∏ –≤ –ì1 –∑–∞–ø–æ–ª–Ω–µ–Ω")
    bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ! –ú—ã –æ—Å–≤–æ–±–æ–¥–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
    g1_bin_person_id_file.close()
  elif call.data == 'mc_tops':
    mc_bin_person_id_file = open("d_bin_person_id.txt", "r")
    mc_bin_person_id = mc_bin_person_id_file.readlines()
    bot.send_message(mc_bin_person_id[-1], "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –º–µ–¥–∏–∞—Ü–µ–Ω—Ä–µ –∑–∞–ø–æ–ª–Ω–µ–Ω")
    bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ! –ú—ã –æ—Å–≤–æ–±–æ–¥–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
    mc_bin_person_id_file.close()
  elif call.data == 'm3_tops':
    m_bin_person_id_file = open("m_bin_person_id.txt", "r")
    m_bin_person_id = m_bin_person_id_file.readlines()
    bot.send_message(m_bin_person_id[-1], "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫—Ä—ã—à–µ—á–∫–∞–º–∏ –≤ –ú3 –∑–∞–ø–æ–ª–Ω–µ–Ω")
    bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ! –ú—ã –æ—Å–≤–æ–±–æ–¥–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
    m_bin_person_id_file.close()
  elif call.data == 'm3_bats':
    m_bin_person_id_file = open("mc_bin_person_id.txt", "r")
    m_bin_person_id = m_bin_person_id_file.readlines()
    bot.send_message(m_bin_person_id[-1], "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –ú3 —Å –±–∞—Ç–∞—Ä–µ–π–∫–∞–º–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω")
    bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ! –ú—ã –æ—Å–≤–æ–±–æ–¥–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
    m_bin_person_id_file.close()

  else:
    bot.send_message(call.message.chat.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é")
    
  call.data = ''


@bot.message_handler(commands=['change_person'])
def change_person(message):
  secret_markup = types.InlineKeyboardMarkup(row_width=1)
  q_but = types.InlineKeyboardButton(
    '—á–µ–ª–æ–≤–µ–∫, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã',
    callback_data='change_person_q')
  b_but = types.InlineKeyboardButton(
    '—á–µ–ª–æ–≤–µ–∫, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫—Ä—ã—à–µ—á–∫–∞–º–∏ –≤ –ë',
    callback_data='change_person_b')
  d_but = types.InlineKeyboardButton(
    '—á–µ–ª–æ–≤–µ–∫, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫—Ä—ã—à–µ—á–∫–∞–º–∏ –≤ –¢–æ—á–∫–µ –∫–∏–ø–µ–Ω–∏—è –ö–æ–º–º—É–Ω–∞',
    callback_data='change_person_d')
  m_but = types.InlineKeyboardButton(
    '—á–µ–ª–æ–≤–µ–∫, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫—Ä—ã—à–µ—á–∫–∞–º–∏ –≤ –ú3',
    callback_data='change_person_m')
  g_but = types.InlineKeyboardButton(
    '—á–µ–ª–æ–≤–µ–∫, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫—Ä—ã—à–µ—á–∫–∞–º–∏ –≤ –ì1',
    callback_data='change_person_g')
  secret_markup.add(q_but, d_but, b_but, g_but, m_but)
  bot.send_message(message.chat.id,
                   "–ö–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å?",
                   reply_markup=secret_markup)


@bot.callback_query_handler(func=lambda call: call.data == "change_person_g")
def get_func_bin_g(call):
  g1_bin_id_file = open("g1_bin_person_id.txt",  "a")
  g1_bin_id_file.write(str(call.message.chat.id) + '\n')
  g1_bin_id_file.close()
  bot.send_message(
    call.message.chat.id,
    '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –ì1 –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è'
  )
  call.data = ''


@bot.callback_query_handler(func=lambda call: call.data == "change_person_b")
def get_func_bin_b(call):
  b_bin_id_file = open("b_bin_person_id.txt",  "a")
  b_bin_id_file.write(str(call.message.chat.id) + '\n')
  b_bin_id_file.close()
  bot.send_message(
    call.message.chat.id,
    '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –ë –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è'
  )
  call.data = ''


@bot.callback_query_handler(func=lambda call: call.data == "change_person_m")
def get_func_bin_m(call):
  m_bin_id_file = open("m_bin_person_id.txt",  "a")
  m_bin_id_file.write(str(call.message.chat.id) + '\n')
  m_bin_id_file.close()
  bot.send_message(
    call.message.chat.id,
    '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ M3 –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è'
  )
  call.data = ''


@bot.callback_query_handler(func=lambda call: call.data == "change_person_d")
def get_func_bin_d(call):
  d_bin_id_file = open("d_bin_person_id.txt",  "a")
  d_bin_id_file.write(str(call.message.chat.id) + '\n')
  d_bin_id_file.close()
  bot.send_message(
    call.message.chat.id,
    '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–≥–¥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –î–æ–º–µ –∫–æ–º–º—É–Ω–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è'
  )
  call.data = ''


@bot.callback_query_handler(func=lambda call: call.data == "change_person_q")
def get_func_bin_q(call):
  q_person_id_file = open("q_person_id.txt",  "a")
  q_person_id_file.write(str(call.message.chat.id) + '\n')
  q_person_id_file.close()
  bot.send_message(
    call.message.chat.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
  call.data = ''

@bot.message_handler(commands=['add_sending'])
def add_sending(message):
  bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç')
  bot.register_next_step_handler(message, add_sending1)

def add_sending1(message):
  global sending_text
  sending_text = str(message.text)
  bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ')
  bot.register_next_step_handler(message, get_user_photo)

@bot.message_handler(content_type=['photo'])
def get_user_photo(message):
  global sending_text, photo
  if str(message.text) != 'None': 
    bot.send_message(message.chat.id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /add_sending")
    return
  else:
    photo = message.photo[0].file_id
    bot.send_message(message.chat.id, '–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∞')
    bot.send_photo(message.chat.id, photo, sending_text)
    bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–∏—Ç—å? –î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ù–µ—Ç"')
    bot.register_next_step_handler(message, do_sending)
  
def do_sending(message):
  global photo
  if str(message.text).lower() == '–Ω–µ—Ç': return
  for user in users_id:
    bot.send_photo(user, photo, sending_text)
  bot.send_message(message.chat.id, '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
  
  

keep_alive()
bot.polling(none_stop=True)
